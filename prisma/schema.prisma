// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  borrowedBooks BorrowedBook[]

  @@map("users")
}

model Author {
  id          String    @id @default(cuid())
  name        String
  biography   String?
  birthDate   DateTime?
  nationality String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  books       Book[]

  @@map("authors")
}

model Book {
  id          String    @id @default(cuid())
  title       String
  isbn        String    @unique
  description String?
  publishedAt DateTime?
  genre       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  authorId      String
  author        Author    @relation(fields: [authorId], references: [id])
  borrowedBooks BorrowedBook[]

  @@map("books")
}

model BorrowedBook {
  id          String    @id @default(cuid())
  borrowedAt  DateTime  @default(now())
  returnedAt  DateTime?
  dueDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId      String
  book        Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId, borrowedAt])
  @@map("borrowed_books")
}
